version: '3.8'
services:
  logstash:
    build:
      context: .
      dockerfile: Dockerfile-logstash
    container_name: logstash
    volumes:
      - ./volumes/logstash/pipeline/:/usr/share/logstash/pipeline/
      - ./volumes/logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml
    depends_on:
      - mongodb
      - elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.2
    container_name: elasticsearch
    restart: unless-stopped
#    ports:
#      - "${ES_PORT}:${ES_PORT}"
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch:/var/lib/elasticsearch/data
    logging:
      driver: "json-file"
      options:
        max-size: "10k"
        max-file: "10"
  kibana:
    image: docker.elastic.co/kibana/kibana:8.3.2
    container_name: kibana
    restart: unless-stopped
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    depends_on:
      - elasticsearch
    environment:
      - "ELASTICSEARCH_URL=http://elasticsearch:9200"
      - "SERVER_NAME=127.0.0.1"
  config-service:
    build: ../config-service/
    ports:
      - "${CONF_SERVICE_PORT}:${CONF_SERVICE_PORT}"
    container_name: config-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8071/user-crud/dev" ]
      interval: 3s
      timeout: 1s
      retries: 5
      start_period: 5s
    env_file:
      - .env
    restart: unless-stopped
  eureka-service:
    build: ../eureka-service/
    hostname: eureka-service
    ports:
      - "${EUREKA_SERVICE_PORT}:${EUREKA_SERVICE_PORT}"
    container_name: eureka-service
    depends_on:
      config-service:
        condition: service_healthy
    restart: unless-stopped
  vertx-service:
    build: ../post-vertx/
    restart: unless-stopped
    container_name: vertx-service
    depends_on:
      - postgres
    ports:
      - '${VERTX_PORT}:${VERTX_PORT}'
  moex-service:
    build: ../moex-xml/
    ports:
      - "${MOEX_SERVICE_PORT}:${MOEX_SERVICE_PORT}"
    container_name: moex-service
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - config-service
      - eureka-service
  license-service:
    build: ../license-service/
    ports:
      - "${LICENSE_SERVICE_PORT}:${LICENSE_SERVICE_PORT}"
    container_name: license-service
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - postgres
      - config-service
      - eureka-service
  organization-service:
    build: ../organization-service/
    ports:
      - "${ORG_SERVICE_PORT}:${ORG_SERVICE_PORT}"
    container_name: organization-service
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - postgres
      - config-service
      - eureka-service
  user-ms:
    build: .
    ports:
      - "${USERMS_PORT}:${USERMS_PORT}"
    container_name: user-ms
    restart: unless-stopped
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    env_file:
      - .env
    depends_on:
      - mongodb
      - config-service
  mongodb:
    image: mongo
    restart: unless-stopped
    container_name: mongodb
    volumes:
      - mongo:/data/db
    ports:
      - "${MONGODB_PORT}:${MONGODB_PORT}"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
  mongo-express:
    image: mongo-express
    restart: unless-stopped
    container_name: mongo-express
    depends_on:
      - mongodb
    ports:
      - "${MONGOEXPRESS_PORT}:${MONGOEXPRESS_PORT}"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGODB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGODB_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
  postgres:
    image: postgres:14.1-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    container_name: postgres
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - postgres:/var/lib/postgresql/data
  user-crud:
    build: ../user-crud/
    restart: unless-stopped
    container_name: user-crud
    depends_on:
      - postgres
      - config-service
    ports:
      - '${USER_CRUD_PORT}:${USER_CRUD_PORT}'

volumes:
  postgres:
    driver: local
  mongo:
    driver: local
  elasticsearch:
    driver: local